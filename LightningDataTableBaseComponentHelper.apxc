public class LightningDataTableBaseComponentHelper {
    @auraEnabled
    public static DataTableResponse getRecords(string objName, string fieldSetName ){
        List<DataTableColumns> lstDataColumns = new List<DataTableColumns>();
        //Field to be queried - fetched from fieldset
        List<String> lstFieldsToQuery = new List<String>();
        //The final wrapper response to return to component
        DataTableResponse response = new DataTableResponse();
        system.debug('objName::'+objName);
        system.debug('fieldSetName::'+fieldSetName);
        Schema.SObjectType SObjectTypeObj = Schema.getGlobalDescribe().get(objName);
        system.debug('SObjectTypeObj::'+SObjectTypeObj);
        Schema.DescribeSObjectResult DescribeSObjectResultObj = SObjectTypeObj.getDescribe();            
        system.debug('DescribeSObjectResultObj::'+DescribeSObjectResultObj);
        Schema.FieldSet fieldSetObj = DescribeSObjectResultObj.FieldSets.getMap().get(fieldSetName);// fieldSetName = data_TableFieldSet
        system.debug('fieldSetObj::'+fieldSetObj);
        for( Schema.FieldSetMember eachFieldSetMember : fieldSetObj.getFields() ){
            String dataType = String.valueOf(eachFieldSetMember.getType()).toLowerCase();
            if(dataType == 'datetime'){
                dataType = 'date';
            }
            DataTableColumns datacolumns = new DataTableColumns( String.valueOf(eachFieldSetMember.getLabel()) ,String.valueOf(eachFieldSetMember.getFieldPath()),String.valueOf(eachFieldSetMember.getType()).toLowerCase());
            lstDataColumns.add(datacolumns);
            lstFieldsToQuery.add(String.valueOf(eachFieldSetMember.getFieldPath()));
        }
        if(! lstDataColumns.isEmpty()){            
            response.lstDataTableColumns = lstDataColumns;
            String query = 'SELECT Id, ' + String.join(lstFieldsToQuery, ',') + ' FROM '+objName;
            System.debug(query);
            response.lstDataTableData = Database.query(query);
        }
        return response;
    }
    public class DataTableColumns{
        @auraEnabled
        public string fieldName {get;set;}
        @auraEnabled
        public string label {get;set;}
        @auraEnabled
        public string type {get;set;}
        public DataTableColumns(string fieldName, string label, string type){
            this.fieldName = label;
            this.label = label;
            this.type = type;
        }
    }
    public class DataTableResponse{
        @auraEnabled
        public List<DataTableColumns> lstDataTableColumns  {get;set;}
        @auraEnabled
        public List<sObject> lstDataTableData  {get;set;}
        public DataTableResponse(){
            lstDataTableColumns = new List<DataTableColumns>();
            lstDataTableData = new List<sObject>();
        }
    }
}
